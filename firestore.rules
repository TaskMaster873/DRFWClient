rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents {
        match /{document=**} {

            function getCurrentEmployeeRole(id) {
                return get(/databases/$(database)/documents/employees/$(id)).data.role;
            }

            match /employees/{employeeId} {
                allow read;
                allow create: if isValidEmployee(employeeId);
                allow update: if isValidEmployeeUpdate(employeeId);
            }

            function employeeActiveFieldType() {
                return request.resource.data.isActive is bool;
            }

            function employeeFieldTypes() {
                return request.resource.data.firstName is string &&
                       request.resource.data.lastName is string &&
                       request.resource.data.phoneNumber is string &&
                       request.resource.data.email is string &&
                       request.resource.data.email.matches('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$') &&
                       request.resource.data.department is string &&
                       request.resource.data.jobTitles is list &&
                       request.resource.data.skills is list &&
                       request.resource.data.role is number &&
                       getCurrentEmployeeRole(request.auth.uid) > request.resource.data.role
            }



            function isValidEmployee(employeeId) {
                let hasEmployeeFields = request.resource.data.keys().hasOnly(['firstName', 'lastName', 'email', 'phoneNumber', 'department', 'jobTitles', 'skills', 'role']);
                let createdValidEmployee = existsAfter(/databases/$(database)/documents/employees/$(employeeId));

                return createdValidEmployee && hasEmployeeFields
                       && getCurrentEmployeeRole(request.auth.uid) >= 3 && employeeFieldTypes();
            }

            function isValidEmployeeUpdate(employeeId) {
                let hasEmployeeFields = request.resource.data.keys().hasOnly(
                ['firstName', 'lastName', 'email', 'phoneNumber', 'department', 'jobTitles', 'skills', 'role']);
                let hasActiveFields = request.resource.data.keys().hasOnly(
                ['firstName', 'lastName', 'email', 'phoneNumber', 'department', 'jobTitles', 'skills', 'role', 'isActive']);
                let createdValidEmployee = existsAfter(/databases/$(database)/documents/employees/$(employeeId));

                return createdValidEmployee && (hasEmployeeFields && employeeFieldTypes()) ||
                (hasActiveFields && employeeFieldTypes() && employeeActiveFieldType()) && getCurrentEmployeeRole(request.auth.uid) >= 3;
            }

            function departmentFieldTypes() {
                return request.resource.data.name is string &&
                       request.resource.data.director is string
            }

            match /departments/{departmentId} {
                allow read;
                allow create: if isValidDepartment(departmentId);
                allow update: if isValidDepartment(departmentId);
            }

            function isValidDepartment(departmentId) {
                let createdValidDepartment = existsAfter(/databases/$(database)/documents/departments/$(departmentId));
                let hasFields = request.resource.data.keys().hasOnly(['name', 'director']);

                return createdValidDepartment && hasFields
                       && getCurrentEmployeeRole(request.auth.uid) >= 3 && departmentFieldTypes();
            }

            function nameFieldTypes() {
                return request.resource.data.name is string
            }

            match /roles/{roleId} {
                allow read;
                allow create: if isValidRole(roleId);
            }

            function isValidRole(roleId) {
                let createdValidRole = existsAfter(/databases/$(database)/documents/roles/$(roleId));
                let hasFields = request.resource.data.keys().hasOnly(['name']);

                return createdValidRole && hasFields
                       && getCurrentEmployeeRole(request.auth.uid) >= 3 && nameFieldTypes();
            }

            match /jobTitles/{jobTitleId} {
                allow read;
                allow create: if isValidJobTitle(jobTitleId);
            }

            function isValidJobTitle(jobTitleId) {
                let createdValidJobTitle = existsAfter(/databases/$(database)/documents/jobTitles/$(jobTitleId));
                let hasFields = request.resource.data.keys().hasOnly(['name']);

                return createdValidJobTitle && hasFields
                       && getCurrentEmployeeRole(request.auth.uid) >= 3 && nameFieldTypes();
            }

            match /shifts/{shiftId} {
                allow read;
                allow create: if isValidShiftCreate(shiftId);
                allow update: if isValidShiftUpdate(shiftId);
                allow delete: if isValidShiftDelete(shiftId);
            }

            function isValidShiftCreate(shiftId) {
                let createdValidShift = existsAfter(/databases/$(database)/documents/shifts/$(shiftId));
                let hasFields = request.resource.data.keys().hasOnly(['department', 'employeeId', 'end', 'start']);
                let shiftDepartment = request.resource.data.department;
                let isAllowed = getCurrentEmployeeRole(request.auth.uid) >= 3 || isManagerAllowed(shiftDepartment);

                return createdValidShift && hasFields && isAllowed && shiftFieldTypes();
            }

            function isValidShiftUpdate(shiftId) {
                let updatedValidShift = existsAfter(/databases/$(database)/documents/shifts/$(shiftId));
                let hasFields = request.resource.data.keys().hasOnly(['department', 'employeeId', 'end', 'start']);
                let shiftDepartment = get(/databases/$(database)/documents/shifts/$(shiftId)).data.department;
                let isAllowed = getCurrentEmployeeRole(request.auth.uid) >= 3 || isManagerAllowed(shiftDepartment);

                return updatedValidShift && hasFields && isAllowed && shiftFieldTypes();
            }

            function isValidShiftDelete(shiftId) {
                let validShift = existsAfter(/databases/$(database)/documents/shifts/$(shiftId));
                let shiftDepartment = get(/databases/$(database)/documents/shifts/$(shiftId)).data.department;
                let isAllowed = getCurrentEmployeeRole(request.auth.uid) >= 3 || isManagerAllowed(shiftDepartment);

                return !validShift && isAllowed;
            }

            function isManagerAllowed(documentDepartment) {
                let isManager = getCurrentEmployeeRole(request.auth.uid) >= 2;
                let employeeDepartment = get(/databases/$(database)/documents/employees/$(request.auth.uid)).data.department;
                
                return employeeDepartment == documentDepartment && isManager;
            }

            function shiftFieldTypes() {
                return request.resource.data.department is string &&
                       request.resource.data.employeeId is string &&
                       request.resource.data.start is timestamp &&
                       request.resource.data.end is timestamp
            }

            match /unavailabilities/{unavailabilityId} {
                allow read;
                allow write;
            }
        }
    }
}
